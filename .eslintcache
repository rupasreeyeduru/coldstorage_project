[{"/home/dell/Downloads/sprproject/s/coldstorage-main/src/index.js":"1","/home/dell/Downloads/sprproject/s/coldstorage-main/src/App.js":"2","/home/dell/Downloads/sprproject/s/coldstorage-main/src/reportWebVitals.js":"3","/home/dell/Downloads/sprproject/s/coldstorage-main/src/aws-exports.js":"4","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/Manage.js":"5","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/Home.js":"6","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/Detailed.js":"7","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_comp/Navbar_menu.js":"8","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/coldStorageTemp.js":"9","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/ambientTemp.js":"10","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/ambientHumid.js":"11","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/dewPointTemp.js":"12","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/doorSensorStatus.js":"13","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/powerSwitchStatus.js":"14","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_comp/Remove_id.js":"15","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_comp/Add_id.js":"16","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/onexRelayStatus.js":"17","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/twoxRelayStatus.js":"18","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/fivexRelayStatus.js":"19","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/sixxRelayStatus.js":"20","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/fourxRelayStatus.js":"21","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/threexRelayStatus.js":"22","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/waterInletTemp.js":"23","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/sevenxRelayStatus.js":"24","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/eightxRelayStatus.js":"25","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/batteryVoltage.js":"26","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/wetBulbTemp.js":"27","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/thermalBatteryTemp.js":"28","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/graphFourHr.js":"29","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/graphOneDay.js":"30","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/graphTwelveHr.js":"31","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/graphOneWeek.js":"32","/home/dell/Downloads/sprproject/s/coldstorage-main/src/graphql/queries.js":"33","/home/dell/Downloads/sprproject/s/coldstorage-main/src/graphql/mutations.js":"34","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/dewPointTemp_graph.js":"35","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/thermalBatteryTemp_graph.js":"36","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/wetBulbTemp_graph.js":"37","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/waterInletTemp_graph.js":"38","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/coldStorageTemp_graph.js":"39","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/ambientHumid_graph.js":"40","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/batteryVoltage_graph.js":"41","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/ambientTemp_graph.js":"42","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/thermalBatteryTemp_graph.js":"43","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/wetBulbTemp_graph.js":"44","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/dewPointTemp_graph.js":"45","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/waterInletTemp_graph.js":"46","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/coldStorageTemp_graph.js":"47","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/batteryVoltage_graph.js":"48","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/ambientHumid_graph.js":"49","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/ambientTemp_graph.js":"50","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/dewPointTemp_graph.js":"51","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/thermalBatteryTemp_graph.js":"52","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/wetBulbTemp_graph.js":"53","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/waterInletTemp_graph.js":"54","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/batteryVoltage_graph.js":"55","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/coldStorageTemp_graph.js":"56","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/ambientHumid_graph.js":"57","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/ambientTemp_graph.js":"58"},{"size":499,"mtime":1631565661000,"results":"59","hashOfConfig":"60"},{"size":1225,"mtime":1631565661000,"results":"61","hashOfConfig":"60"},{"size":362,"mtime":1631565661000,"results":"62","hashOfConfig":"60"},{"size":1261,"mtime":1646972972000,"results":"63","hashOfConfig":"60"},{"size":718,"mtime":1631565661000,"results":"64","hashOfConfig":"60"},{"size":8025,"mtime":1646981168027,"results":"65","hashOfConfig":"60"},{"size":14802,"mtime":1646981153207,"results":"66","hashOfConfig":"60"},{"size":5557,"mtime":1631565661000,"results":"67","hashOfConfig":"60"},{"size":2275,"mtime":1631565661000,"results":"68","hashOfConfig":"60"},{"size":2258,"mtime":1631565661000,"results":"69","hashOfConfig":"60"},{"size":2262,"mtime":1631565661000,"results":"70","hashOfConfig":"60"},{"size":2269,"mtime":1631565661000,"results":"71","hashOfConfig":"60"},{"size":2447,"mtime":1631565661000,"results":"72","hashOfConfig":"60"},{"size":2455,"mtime":1631565661000,"results":"73","hashOfConfig":"60"},{"size":2661,"mtime":1631565661000,"results":"74","hashOfConfig":"60"},{"size":2697,"mtime":1631565661000,"results":"75","hashOfConfig":"60"},{"size":2442,"mtime":1631565661000,"results":"76","hashOfConfig":"60"},{"size":2442,"mtime":1631565661000,"results":"77","hashOfConfig":"60"},{"size":2449,"mtime":1631565661000,"results":"78","hashOfConfig":"60"},{"size":2441,"mtime":1631565661000,"results":"79","hashOfConfig":"60"},{"size":2490,"mtime":1631565661000,"results":"80","hashOfConfig":"60"},{"size":2455,"mtime":1631565661000,"results":"81","hashOfConfig":"60"},{"size":2282,"mtime":1631565661000,"results":"82","hashOfConfig":"60"},{"size":2456,"mtime":1631565661000,"results":"83","hashOfConfig":"60"},{"size":2455,"mtime":1631565661000,"results":"84","hashOfConfig":"60"},{"size":2272,"mtime":1631565661000,"results":"85","hashOfConfig":"60"},{"size":2268,"mtime":1631565661000,"results":"86","hashOfConfig":"60"},{"size":2302,"mtime":1631565661000,"results":"87","hashOfConfig":"60"},{"size":1487,"mtime":1631565661000,"results":"88","hashOfConfig":"60"},{"size":1496,"mtime":1631565661000,"results":"89","hashOfConfig":"60"},{"size":1498,"mtime":1631565661000,"results":"90","hashOfConfig":"60"},{"size":1488,"mtime":1631565661000,"results":"91","hashOfConfig":"60"},{"size":24534,"mtime":1631565661000,"results":"92","hashOfConfig":"60"},{"size":21979,"mtime":1631565661000,"results":"93","hashOfConfig":"60"},{"size":4028,"mtime":1631565661000,"results":"94","hashOfConfig":"60"},{"size":4119,"mtime":1631565661000,"results":"95","hashOfConfig":"60"},{"size":4007,"mtime":1631565661000,"results":"96","hashOfConfig":"60"},{"size":4056,"mtime":1631565661000,"results":"97","hashOfConfig":"60"},{"size":4069,"mtime":1631565661000,"results":"98","hashOfConfig":"60"},{"size":4039,"mtime":1631565661000,"results":"99","hashOfConfig":"60"},{"size":4037,"mtime":1631565661000,"results":"100","hashOfConfig":"60"},{"size":4004,"mtime":1631565661000,"results":"101","hashOfConfig":"60"},{"size":2727,"mtime":1631565661000,"results":"102","hashOfConfig":"60"},{"size":2684,"mtime":1631565661000,"results":"103","hashOfConfig":"60"},{"size":2695,"mtime":1631565661000,"results":"104","hashOfConfig":"60"},{"size":2704,"mtime":1631565661000,"results":"105","hashOfConfig":"60"},{"size":2707,"mtime":1631565661000,"results":"106","hashOfConfig":"60"},{"size":2697,"mtime":1631565661000,"results":"107","hashOfConfig":"60"},{"size":2695,"mtime":1631565661000,"results":"108","hashOfConfig":"60"},{"size":2680,"mtime":1631565661000,"results":"109","hashOfConfig":"60"},{"size":2694,"mtime":1631565661000,"results":"110","hashOfConfig":"60"},{"size":2726,"mtime":1631565661000,"results":"111","hashOfConfig":"60"},{"size":2683,"mtime":1631565661000,"results":"112","hashOfConfig":"60"},{"size":2703,"mtime":1631565661000,"results":"113","hashOfConfig":"60"},{"size":2696,"mtime":1631565661000,"results":"114","hashOfConfig":"60"},{"size":2706,"mtime":1631565661000,"results":"115","hashOfConfig":"60"},{"size":2694,"mtime":1631565661000,"results":"116","hashOfConfig":"60"},{"size":2679,"mtime":1631565661000,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"so4yi2",{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"120"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"120"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"120"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"120"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"120"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"120"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"120"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"120"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"120"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"120"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"120"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"120"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"120"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"120"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"120"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"120"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"120"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"120"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"120"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"120"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"120"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"120"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"120"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"120"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"120"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"120"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"120"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"120"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"120"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"120"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"120"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"120"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"120"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"120"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"120"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"120"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"120"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"120"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"120"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"120"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"120"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"120"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"120"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"120"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"120"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"120"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"120"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"120"},"/home/dell/Downloads/sprproject/s/coldstorage-main/src/index.js",[],["285","286"],"/home/dell/Downloads/sprproject/s/coldstorage-main/src/App.js",[],"/home/dell/Downloads/sprproject/s/coldstorage-main/src/reportWebVitals.js",[],"/home/dell/Downloads/sprproject/s/coldstorage-main/src/aws-exports.js",[],"/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/Manage.js",["287","288"],"import React from \"react\";\nimport Add_id from \"./cs_comp/Add_id\";\nimport Remove_id from \"./cs_comp/Remove_id\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Manage = () => {\n  return (\n    <div>\n      &nbsp;\n      <center>\n        {\" \"}\n        <h1> Add ID: </h1>\n      </center>\n      <Grid container spacing={4} alignItems=\"center\" justifyContent=\"center\">\n        <Grid item md={3}>\n          <Add_id />\n        </Grid>\n      </Grid>\n      <center>\n        {\" \"}\n        <h1> Remove ID: </h1>\n      </center>\n      <Grid container spacing={4} alignItems=\"center\" justifyContent=\"center\">\n        <Grid item md={3}>\n          <Remove_id />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Manage;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/Home.js",["289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307"],"import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport _coldStorageTemp from \"../components/cs_data/coldStorageTemp.js\";\nimport _dewPointTemp from \"../components/cs_data/dewPointTemp.js\";\nimport _ambientTemp from \"../components/cs_data/ambientTemp.js\";\nimport _ambientHumid from \"../components/cs_data/ambientHumid.js\";\nimport _doorSensorStatus from \"../components/cs_data/doorSensorStatus.js\";\nimport _powerSwitchStatus from \"../components/cs_data/powerSwitchStatus.js\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nconst Home= ({ setSelectedMode, selectedMode }) =>{\n  // useEffect(() => {\n  //   setvalue(localStorage.getItem(\"value\"))\n\n    \n  // }, []);\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    ColdRoomConditions: false,\n    AmbientConditions: false,\n    DoorStatus: false,\n    UnitPower: false,\n  });\n  const [value, setvalue] = React.useState();\n  const [value1, setvalue1] = React.useState();\n  const [value2, setvalue2] = React.useState();\n  const [value3, setvalue3] = React.useState();\n  const [value4, setvalue4] = React.useState();\n  const [value6, setvalue6] = React.useState();\n  // setvalue4(0)\n  var value5 = 0\n  \n\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    if (event.target.checked && event.target.name === \"ColdRoomConditions\") {\n      setvalue(event.target.name)\n      // localStorage.setItem(\"value\", value);\n\n    }\n    else if (!event.target.checked && event.target.name === \"ColdRoomConditions\") {\n      setvalue(\"\")\n      // localStorage.setItem(\"value\", value);\n\n    }\n\n    else if (event.target.checked && event.target.name === \"AmbientConditions\") {\n      setvalue1(event.target.name)\n    }\n    else if (!event.target.checked && event.target.name === \"AmbientConditions\") {\n      setvalue1(\"\")\n\n    }\n    else if (event.target.checked && event.target.name === \"DoorStatus\") {\n      setvalue2(event.target.name)\n\n    }\n    else if (!event.target.checked && event.target.name === \"DoorStatus\") {\n      setvalue2(\"\")\n\n    }\n    else if (event.target.checked && event.target.name === \"UnitPower\") {\n      setvalue6(event.target.name)\n\n    }\n    else if (!event.target.checked && event.target.name === \"UnitPower\") {\n      setvalue6(\"\")\n\n    }\n\n  };\n  function refresh(data) {\n    if (data === selectedMode) {\n      data = \"0\";\n      setSelectedMode(data);\n    } else {\n      setSelectedMode(data);\n    }\n  }\n  const filter = () => {\n    // if(value4===0)\n    // {\n    setvalue4(6)\n    if (value4 === 6) {\n      setvalue4(0)\n      // setvalue(\"\")\n      // setvalue1(\"\")\n      // setvalue2(\"\")\n    }\n    // }\n    // else if(value4===6)\n    // {\n    //   setvalue4(0)\n    // }\n  }\n\n\n  const { ColdRoomConditions, AmbientConditions, DoorStatus,UnitPower } = state;\n  const error = [ColdRoomConditions, AmbientConditions, DoorStatus,UnitPower].filter((v) => v).length !== 2;\n\n  return (\n    <div >\n      \n      &nbsp;\n      <center>\n        <h1 >{localStorage.getItem(\"id\")} </h1>\n      </center>\n      &nbsp;\n      <center>\n        <Button color=\"primary\"  onClick={() => refresh(\"1\")} variant=\"contained\">\n          Refresh\n        </Button>\n      </center> \n      &nbsp; \n      <center>\n        <Button color=\"primary\" onClick={() => filter()} variant=\"contained\">\n          Filter\n        </Button>\n      </center>\n\n      {value4 === 6 && \n        <center>\n        <FormControl component=\"fieldset\" className={classes.formControl}>\n          {/* <FormLabel component=\"legend\">Assign responsibility</FormLabel> */}\n          <FormGroup>\n\n            <FormControlLabel\n              control={<Checkbox checked={ColdRoomConditions} onChange={handleChange} name=\"ColdRoomConditions\" />}\n              label=\"Cold Room Conditions\"\n            />\n            <FormControlLabel\n              control={<Checkbox checked={AmbientConditions} onChange={handleChange} name=\"AmbientConditions\" />}\n              label=\"Ambient Conditions\"\n            />\n            <FormControlLabel\n              control={<Checkbox checked={DoorStatus} onChange={handleChange} name=\"DoorStatus\" />}\n              label=\"Door Status\"\n            />\n            <FormControlLabel\n              control={<Checkbox checked={UnitPower} onChange={handleChange} name=\"UnitPower\" />}\n              label=\"Unit Power\"\n            />\n          </FormGroup>\n          {/* <FormHelperText>Be careful</FormHelperText> */}\n        </FormControl>\n          </center>}\n      {value5 === 0 && value4!==6 &&\n        < Grid>\n          &nbsp; \n          <center>\n            <h2> Cold Room Conditions: </h2>\n          </center>\n          &nbsp; \n          <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n            <_coldStorageTemp />\n            <_dewPointTemp />\n          </Grid>\n          &nbsp; \n        </Grid>}\n\n      {value5 === 0 && value4!==6 &&\n        <Grid>\n          &nbsp; \n          <center>\n            {\" \"}\n            <h2> Ambient Conditions: </h2>\n          </center>\n          &nbsp; \n          <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n            <_ambientTemp />\n            <_ambientHumid />\n          </Grid>\n          &nbsp; \n        </Grid>\n      }\n      {value5 === 0 && value4!==6 &&\n        <Grid>\n          &nbsp;\n          <center>\n            {\" \"}\n            <h2> Door Status: </h2>\n          </center>\n          &nbsp;\n          <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n            <_doorSensorStatus />\n          </Grid>\n          &nbsp;\n        </Grid>\n      }\n      {value5 === 0 && value4!==6 &&\n        <Grid>\n          &nbsp;\n          <center>\n            {\" \"}\n            <h2> Unit Power: </h2>\n          </center>\n          &nbsp;\n          <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n            <_powerSwitchStatus />\n          </Grid>\n          &nbsp;\n        </Grid>\n      }\n\n      {value === 'ColdRoomConditions'  && value4===6 &&\n        <Grid>\n          &nbsp;\n          <center>\n            <h2> Cold Room Conditions: </h2>\n          </center>\n          &nbsp;\n          <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n            <_coldStorageTemp />\n            <_dewPointTemp />\n          </Grid>\n        </Grid>\n\n      }\n\n      {value1 === 'AmbientConditions'  && value4===6 &&\n        <Grid>\n          &nbsp;\n          <center>\n            <h2> Ambient Conditions: </h2>\n          </center>\n          &nbsp;\n          <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n            <_ambientTemp />\n            <_ambientHumid />\n          </Grid>\n        </Grid>\n\n      }\n      {value2 === 'DoorStatus'  && value4===6 &&\n        <Grid>\n          &nbsp;\n          <center>\n            <h2> DoorStatus: </h2>\n          </center>\n          &nbsp;\n          <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n             <_doorSensorStatus />\n          </Grid>\n        </Grid>\n\n      }\n      {value6 === 'UnitPower'  && value4===6 &&\n        <Grid>\n          &nbsp;\n          <center>\n            <h2> DoorStatus: </h2>\n          </center>\n          &nbsp;\n          <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n             \n            <_powerSwitchStatus />\n             \n          </Grid>\n        </Grid>\n\n      }\n      \n    </div>\n  );\n}\nexport default Home;\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/Detailed.js",["308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"// import React from \"react\";\n// import { useState } from \"react\";\n// import Button from \"@material-ui/core/Button\";\n// import Grid from \"@material-ui/core/Grid\";\n// import { Menu, MenuItem } from \"@material-ui/core\";\n// import _coldStorageTemp from \"../components/cs_data/coldStorageTemp.js\";\n// import _dewPointTemp from \"../components/cs_data/dewPointTemp.js\";\n// import _ambientTemp from \"../components/cs_data/ambientTemp.js\";\n// import _ambientHumid from \"../components/cs_data/ambientHumid.js\";\n// import _doorSensorStatus from \"../components/cs_data/doorSensorStatus.js\";\n// import _powerSwitchStatus from \"../components/cs_data/powerSwitchStatus.js\";\n// import _onexRelayStatus from \"../components/cs_data/onexRelayStatus\";\n// import _twoxRelayStatus from \"../components/cs_data/twoxRelayStatus\";\n// import _threexRelayStatus from \"../components/cs_data/threexRelayStatus\";\n// import _fourxRelayStatus from \"../components/cs_data/fourxRelayStatus\";\n// import _fivexRelayStatus from \"../components/cs_data/fivexRelayStatus\";\n// import _sixxRelayStatus from \"../components/cs_data/sixxRelayStatus\";\n// import _sevenxRelayStatus from \"../components/cs_data/sevenxRelayStatus\";\n// import _eightxRelayStatus from \"../components/cs_data/eightxRelayStatus\";\n// import _batteryVoltage from \"../components/cs_data/batteryVoltage\";\n// import _thermalBatteryTemp from \"../components/cs_data/thermalBatteryTemp\";\n// import _waterInletTemp from \"../components/cs_data/waterInletTemp\";\n// import _wetBulbTemp from \"../components/cs_data/wetBulbTemp\";\n// import _graphFourHr from \"./cs_graph/graphFourHr\";\n// import _graphTwelveHr from \"./cs_graph/graphTwelveHr\";\n// import _graphOneDay from \"./cs_graph/graphOneDay\";\n// import _graphOneWeek from \"./cs_graph/graphOneWeek\";\n\n// const Detailed = ({ setSelectedMode, selectedMode }) => {\n//   const [anchorEl, setAnchorEl] = useState(null);\n//   const [graph, setGraph] = useState();\n//   const handleOpen = (event) => {\n//     setAnchorEl(event.currentTarget);\n//   };\n//   const handleClose = () => {\n//     setAnchorEl(null);\n//   };\n//   const handleSelect = (id) => {\n//     if (id === 0) {\n//       setGraph(_graphFourHr);\n//     }\n//     if (id === 1) {\n//       setGraph(_graphTwelveHr);\n//     }\n//     if (id === 2) {\n//       setGraph(_graphOneDay);\n//     }\n//     if (id === 3) {\n//       setGraph(_graphOneWeek);\n//     }\n//     handleClose();\n//   };\n\n//   function refresh(data) {\n//     if (data === selectedMode) {\n//       data = \"0\";\n//       setSelectedMode(data);\n//     } else {\n//       setSelectedMode(data);\n//     }\n//   }\n//   return (\n//     <div>\n//       &nbsp;\n//       <center>\n//         <h1>{localStorage.getItem(\"id\")} </h1>\n//       </center>\n//       &nbsp;\n//       <center>\n//         <Button onClick={() => refresh(\"1\")} variant=\"contained\">\n//           Refresh\n//         </Button>\n//       </center>\n//       &nbsp;\n//       <center>\n//         {\" \"}\n//         <h1> Relay Status: </h1>\n//       </center>\n//       &nbsp;\n//       <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n//         <_onexRelayStatus />\n//         <_twoxRelayStatus />\n//         <_threexRelayStatus />\n//         <_fourxRelayStatus />\n//         <_fivexRelayStatus />\n//         <_sixxRelayStatus />\n//         <_sevenxRelayStatus />\n//         <_eightxRelayStatus />\n//       </Grid>\n//       &nbsp;\n//       <center>\n//         {\" \"}\n//         <h1> Others: </h1>\n//       </center>\n//       &nbsp;\n//       <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n//         <_batteryVoltage />\n//         <_thermalBatteryTemp />\n//         <_waterInletTemp />\n//         <_wetBulbTemp />\n//       </Grid>\n//       &nbsp;\n//       <center>\n//         {\" \"}\n//         <h1> Graphs: </h1>\n//       </center>\n//       &nbsp; &nbsp;\n//       <>\n//         <center>\n//           <Button\n//             variant=\"contained\"\n//             aria-controls=\"simple-menu\"\n//             aria-haspopup=\"true\"\n//             onClick={handleOpen}\n//           >\n//             Select Graphs\n//           </Button>\n//           &nbsp; &nbsp;\n//         </center>\n//         <Menu\n//           id=\"simple-menu\"\n//           anchorEl={anchorEl}\n//           open={Boolean(anchorEl)}\n//           onClose={handleClose}\n//           anchorOrigin={{\n//             vertical: \"top\",\n//             horizontal: \"center\",\n//           }}\n//           transformOrigin={{\n//             vertical: \"top\",\n//             horizontal: \"center\",\n//           }}\n//         >\n//           <MenuItem onClick={() => handleSelect(0)}>Last 4 Hour</MenuItem>\n//           <MenuItem onClick={() => handleSelect(1)}>Last 12 Hours</MenuItem>\n//           <MenuItem onClick={() => handleSelect(2)}>Last 24 Hours</MenuItem>\n//           <MenuItem onClick={() => handleSelect(3)}>Last 7 Days</MenuItem>\n//         </Menu>\n//         {graph}\n//       </>\n//     </div>\n//   );\n// };\n\n// export default Detailed;\nimport React from \"react\";\nimport { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Menu, MenuItem } from \"@material-ui/core\";\nimport _coldStorageTemp from \"../components/cs_data/coldStorageTemp.js\";\nimport _dewPointTemp from \"../components/cs_data/dewPointTemp.js\";\nimport _ambientTemp from \"../components/cs_data/ambientTemp.js\";\nimport _ambientHumid from \"../components/cs_data/ambientHumid.js\";\nimport _doorSensorStatus from \"../components/cs_data/doorSensorStatus.js\";\nimport _powerSwitchStatus from \"../components/cs_data/powerSwitchStatus.js\";\nimport _onexRelayStatus from \"../components/cs_data/onexRelayStatus\";\nimport _twoxRelayStatus from \"../components/cs_data/twoxRelayStatus\";\nimport _threexRelayStatus from \"../components/cs_data/threexRelayStatus\";\nimport _fourxRelayStatus from \"../components/cs_data/fourxRelayStatus\";\nimport _fivexRelayStatus from \"../components/cs_data/fivexRelayStatus\";\nimport _sixxRelayStatus from \"../components/cs_data/sixxRelayStatus\";\nimport _sevenxRelayStatus from \"../components/cs_data/sevenxRelayStatus\";\nimport _eightxRelayStatus from \"../components/cs_data/eightxRelayStatus\";\nimport _batteryVoltage from \"../components/cs_data/batteryVoltage\";\nimport _thermalBatteryTemp from \"../components/cs_data/thermalBatteryTemp\";\nimport _waterInletTemp from \"../components/cs_data/waterInletTemp\";\nimport _wetBulbTemp from \"../components/cs_data/wetBulbTemp\";\nimport _graphFourHr from \"./cs_graph/graphFourHr\";\nimport _graphTwelveHr from \"./cs_graph/graphTwelveHr\";\nimport _graphOneDay from \"./cs_graph/graphOneDay\";\nimport _graphOneWeek from \"./cs_graph/graphOneWeek\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nconst Detailed = ({ setSelectedMode, selectedMode }) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [graph, setGraph] = useState();\n  const [state, setState] = React.useState({\n    RelayStatus: false,\n    BatteryVoltage: false,\n    ThermalBatteryTemperature: false,\n    WaterInletTemperature: false,\n    WetBulbTemperature:false,\n  });\n  const classes = useStyles();\n  const [value, setvalue] = React.useState();\n  const [value1, setvalue1] = React.useState();\n  const [value2, setvalue2] = React.useState();\n  const [value3, setvalue3] = React.useState();\n  const [value4, setvalue4] = React.useState();\n  const [value5,setvalue5] = React.useState();\n\n  const handleOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleSelect = (id) => {\n    if (id === 0) {\n      setGraph(_graphFourHr);\n    }\n    if (id === 1) {\n      setGraph(_graphTwelveHr);\n    }\n    if (id === 2) {\n      setGraph(_graphOneDay);\n    }\n    if (id === 3) {\n      setGraph(_graphOneWeek);\n    }\n    handleClose();\n  };\n\n  function refresh(data) {\n    if (data === selectedMode) {\n      data = \"0\";\n      setSelectedMode(data);\n    } else {\n      setSelectedMode(data);\n    }\n  }\n  const filter = () => {\n    \n    setvalue5(6)\n    if (value5 === 6) {\n      setvalue5(0)\n      \n    }\n  \n  }\n\n  var value6=0\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    if (event.target.checked && event.target.name === \"RelayStatus\") {\n      setvalue(event.target.name)\n\n    }\n    if (!event.target.checked && event.target.name === \"RelayStatus\") {\n      setvalue(\"\")\n\n    }\n\n    else if (event.target.checked && event.target.name === \"BatteryVoltage\") {\n      setvalue1(event.target.name)\n    }\n    else if (!event.target.checked && event.target.name === \"BatteryVoltage\") {\n      setvalue1(\"\")\n\n    }\n    else if (event.target.checked && event.target.name === \"ThermalBatteryTemperature\") {\n      setvalue2(event.target.name)\n\n    }\n    else if (!event.target.checked && event.target.name === \"ThermalBatteryTemperature\") {\n      setvalue2(\"\")\n\n    }\n    else if (event.target.checked && event.target.name === \"WaterInletTemperature\") {\n      setvalue3(event.target.name)\n\n    }\n    else if (!event.target.checked && event.target.name === \"WaterInletTemperature\") {\n      setvalue3(\"\")\n\n    }\n    else if (event.target.checked && event.target.name === \"WetBulbTemperature\") {\n      setvalue4(event.target.name)\n\n    }\n    else if (!event.target.checked && event.target.name === \"WetBulbTemperature\") {\n      setvalue4(\"\")\n\n    }\n    \n\n  };\n\n  const { RelayStatus,BatteryVoltage ,ThermalBatteryTemperature , WaterInletTemperature,WetBulbTemperature} = state;\n  const error = [ RelayStatus,BatteryVoltage ,ThermalBatteryTemperature , WaterInletTemperature,WetBulbTemperature].filter((v) => v).length !== 2;\n\n  return (\n    <div>\n      &nbsp;\n      <center>\n        <h1 >{localStorage.getItem(\"id\")} </h1>\n      </center>\n      &nbsp;\n      <center>\n        <Button color=\"primary\" onClick={() => refresh(\"1\")} variant=\"contained\">\n          Refresh\n        </Button>\n      </center>\n      &nbsp;\n      <center>\n        <Button color =\"primary\" onClick={() => filter()} variant=\"contained\">\n          Filter\n        </Button>\n      </center>\n      \n      &nbsp;\n      {value5 === 6 && \n        <center>\n        <FormControl component=\"fieldset\" className={classes.formControl}>\n          {/* <FormLabel component=\"legend\">Assign responsibility</FormLabel> */}\n          <FormGroup>\n\n            <FormControlLabel\n              control={<Checkbox checked={RelayStatus} onChange={handleChange} name=\"RelayStatus\" />}\n              label=\"Relay Status\"\n            />\n            <FormControlLabel\n              control={<Checkbox checked={BatteryVoltage} onChange={handleChange} name=\"BatteryVoltage\" />}\n              label=\"BatteryVoltage\"\n            />\n            <FormControlLabel\n              control={<Checkbox checked={ThermalBatteryTemperature} onChange={handleChange} name=\"ThermalBatteryTemperature\" />}\n              label=\"ThermalBatteryTemperature\"\n            />\n            <FormControlLabel\n              control={<Checkbox checked={WaterInletTemperature} onChange={handleChange} name=\"WaterInletTemperature\" />}\n              label=\"WaterInletTemperature\"\n            />\n            <FormControlLabel\n              control={<Checkbox checked={WetBulbTemperature} onChange={handleChange} name=\"WetBulbTemperature\" />}\n              label=\"WetBulbTemperature\"\n            />\n          </FormGroup>\n          {/* <FormHelperText>Be careful</FormHelperText> */}\n        </FormControl>\n          </center>}\n      { value6===0 && value5!==6 &&\n      <div>\n      <center>\n        {\" \"}\n        <h1> Relay Status: </h1>\n      </center>\n      &nbsp;\n      <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n        <_onexRelayStatus />\n        <_twoxRelayStatus />\n        <_threexRelayStatus />\n        <_fourxRelayStatus />\n        <_fivexRelayStatus />\n        <_sixxRelayStatus />\n        <_sevenxRelayStatus />\n        <_eightxRelayStatus />\n      </Grid>\n      &nbsp;\n      <center>\n        {\" \"}\n        <h1> Others: </h1>\n      </center>\n      &nbsp;\n      <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n        <_batteryVoltage />\n        <_thermalBatteryTemp />\n        <_waterInletTemp />\n        <_wetBulbTemp />\n      </Grid></div>}\n\n\n      &nbsp;\n      { value==='RelayStatus' && value5===6 &&\n       <div><center>\n        {\" \"}\n        <h1> Relay Status: </h1>\n      </center>\n      &nbsp;\n      <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n        <_onexRelayStatus />\n        <_twoxRelayStatus />\n        <_threexRelayStatus />\n        <_fourxRelayStatus />\n        <_fivexRelayStatus />\n        <_sixxRelayStatus />\n        <_sevenxRelayStatus />\n        <_eightxRelayStatus />\n      </Grid></div>}\n      &nbsp;\n      <center>\n        {\" \"}\n        <h1> Others: </h1>\n      </center>\n      &nbsp;\n      <Grid container spacing={1} alignItems=\"center\" justifyContent=\"center\">\n       {value1==='BatteryVoltage' &&<_batteryVoltage />}\n        {value2==='ThermalBatteryTemperature' && <_thermalBatteryTemp />}\n        {value3==='WaterInletTemperature' &&<_waterInletTemp />}\n       {value4==='WetBulbTemperature' && <_wetBulbTemp />}\n      </Grid>\n      &nbsp;\n      <center>\n        {\" \"}\n        <h1> Graphs: </h1>\n      </center>\n      &nbsp; &nbsp;\n      \n      <>\n        <center>\n          <Button\n            variant=\"contained\"\n            aria-controls=\"simple-menu\"\n            aria-haspopup=\"true\"\n            onClick={handleOpen}\n          >\n            Select Graphs\n          </Button>\n          &nbsp; &nbsp;\n        </center>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n          anchorOrigin={{\n            vertical: \"top\",\n            horizontal: \"center\",\n          }}\n          transformOrigin={{\n            vertical: \"top\",\n            horizontal: \"center\",\n          }}\n        >\n          <MenuItem onClick={() => handleSelect(0)}>Last 4 Hour</MenuItem>\n          <MenuItem onClick={() => handleSelect(1)}>Last 12 Hours</MenuItem>\n          <MenuItem onClick={() => handleSelect(2)}>Last 24 Hours</MenuItem>\n          <MenuItem onClick={() => handleSelect(3)}>Last 7 Days</MenuItem>\n        </Menu>\n        {graph}\n      </>\n    </div>\n  );\n};\n\nexport default Detailed;\n\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_comp/Navbar_menu.js",[],"/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/coldStorageTemp.js",["341"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { coldStorageTempDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: coldStorageTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.ColdStorageTempDataByDate.items;\n      if (csdata.length === 0) {\n        throw true;\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check === 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Temperature\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.coldStorageTemp)[0]} °C\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/ambientTemp.js",["342"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { ambientTempDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: ambientTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.AmbientTempDataByDate.items;\n      if (csdata.length === 0) {\n        throw true;\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check === 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Temperature\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.ambientTemp)[0]} °C\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/ambientHumid.js",["343"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { ambientHumidDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: ambientHumidDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.AmbientHumidDataByDate.items;\n      if (csdata.length === 0) {\n        throw true;\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check === 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Ambient Humid\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.ambientHumid)[0]} %\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/dewPointTemp.js",["344"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { dewPointTempDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: dewPointTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.DewPointTempDataByDate.items;\n      if (csdata.length === 0) {\n        throw true;\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check === 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Target Temperature\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.dewPointTemp)[0]} °C\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/doorSensorStatus.js",["345","346","347","348"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { doorSensorStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: doorSensorStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.DoorSensorStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n      if (csdata.map((x) => x.doorSensorStatus)[0] == \"0\") {\n        csdata[0].doorSensorStatus = \"OFF\";\n      } else {\n        csdata[0].doorSensorStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Status (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.doorSensorStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/powerSwitchStatus.js",["349","350","351","352"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { powerSwitchStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: powerSwitchStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.PowerSwitchStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n      if (csdata.map((x) => x.powerSwitchStatus)[0] == \"0\") {\n        csdata[0].powerSwitchStatus = \"OFF\";\n      } else {\n        csdata[0].powerSwitchStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Status (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.powerSwitchStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_comp/Remove_id.js",["353"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { deleteColdStorageID } from \"../../graphql/mutations\";\nimport { listColdStorageIDS } from \"../../graphql/queries\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: theme.spacing(2),\n\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"300px\",\n    },\n    \"& .MuiButtonBase-root\": {\n      margin: theme.spacing(2),\n    },\n  },\n}));\n\nconst Remove_id = () => {\n  const classes = useStyles();\n  const { handleSubmit, control } = useForm();\n\n  const onSubmit = async (data) => {\n    let cs_id_items = {};\n    let cs_id = {};\n    let find = {};\n    let check = false;\n    try {\n      const ColdStorageIDS = await API.graphql({\n        query: listColdStorageIDS,\n      });\n      cs_id_items = ColdStorageIDS.data.listColdStorageIDS.items;\n      cs_id = cs_id_items.map((x) => x.coldstorage_id);\n    } catch (err) {\n      console.log(\"error fetching data\");\n      check = true;\n    }\n\n    if (cs_id.includes(data.coldstorage_id) === true && check === false) {\n      find = cs_id_items.find(function (id) {\n        if (id.coldstorage_id === data.coldstorage_id) return true;\n      });\n\n      try {\n        await API.graphql(\n          graphqlOperation(deleteColdStorageID, { input: { id: find.id } })\n        );\n        alert(\"This coldstorage id has been deleted.\");\n        window.location.replace(window.location.pathname);\n      } catch (err) {\n        console.log(\"error posting data\");\n      }\n    } else {\n      alert(\"This coldstorage id does not exist.\");\n    }\n  };\n\n  return (\n    <form className={classes.root} onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        name=\"coldstorage_id\"\n        control={control}\n        defaultValue=\"TTECH-\"\n        render={({ field: { onChange, value }, fieldState: { error } }) => (\n          <TextField\n            label=\"ColdStorage-ID\"\n            variant=\"filled\"\n            value={value}\n            onChange={onChange}\n            error={!!error}\n            helperText={error ? error.message : null}\n          />\n        )}\n        rules={{ required: \"ColdStorage-ID is required\" }}\n      />\n      <div>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n          Remove ID\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default Remove_id;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_comp/Add_id.js",[],"/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/onexRelayStatus.js",["354","355","356","357"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { onexRelayStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: onexRelayStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.OnexRelayStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n      if (csdata.map((x) => x.onexRelayStatus)[0] == \"0\") {\n        csdata[0].onexRelayStatus = \"OFF\";\n      } else {\n        csdata[0].onexRelayStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Relay 1 (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.onexRelayStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/twoxRelayStatus.js",["358","359","360","361"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { twoxRelayStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: twoxRelayStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.TwoxRelayStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n      if (csdata.map((x) => x.twoxRelayStatus)[0] == \"0\") {\n        csdata[0].twoxRelayStatus = \"OFF\";\n      } else {\n        csdata[0].twoxRelayStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Relay 2 (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.twoxRelayStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/fivexRelayStatus.js",["362","363","364","365"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { fivexRelayStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: fivexRelayStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.FivexRelayStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n\n      if (csdata.map((x) => x.fivexRelayStatus)[0] == \"0\") {\n        csdata[0].fivexRelayStatus = \"OFF\";\n      } else {\n        csdata[0].fivexRelayStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Relay 5 (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.fivexRelayStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/sixxRelayStatus.js",["366","367","368","369"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { sixxRelayStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: sixxRelayStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.SixxRelayStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n      if (csdata.map((x) => x.sixxRelayStatus)[0] == \"0\") {\n        csdata[0].sixxRelayStatus = \"OFF\";\n      } else {\n        csdata[0].sixxRelayStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Relay 6 (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.sixxRelayStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/fourxRelayStatus.js",["370","371","372","373","374"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { fourxRelayStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport awsconfig from \"../../aws-exports\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: fourxRelayStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.FourxRelayStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n      if (csdata.map((x) => x.fourxRelayStatus)[0] == \"0\") {\n        csdata[0].fourxRelayStatus = \"OFF\";\n      } else {\n        csdata[0].fourxRelayStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Relay 4 (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.fourxRelayStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/threexRelayStatus.js",["375","376","377","378"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { threexRelayStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: threexRelayStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.ThreexRelayStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n      if (csdata.map((x) => x.threexRelayStatus)[0] == \"0\") {\n        csdata[0].threexRelayStatus = \"OFF\";\n      } else {\n        csdata[0].threexRelayStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Relay 3 (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.threexRelayStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/waterInletTemp.js",["379"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { waterInletTempDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: waterInletTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.WaterInletTempDataByDate.items;\n      if (csdata.length === 0) {\n        throw true;\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check === 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Water Inlet Temperature\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.waterInletTemp)[0]} °C\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/sevenxRelayStatus.js",["380","381","382","383"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { sevenxRelayStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: sevenxRelayStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.SevenxRelayStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n      if (csdata.map((x) => x.sevenxRelayStatus)[0] == \"0\") {\n        csdata[0].sevenxRelayStatus = \"OFF\";\n      } else {\n        csdata[0].sevenxRelayStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Relay 7 (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.sevenxRelayStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/eightxRelayStatus.js",["384","385","386","387"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { eightxRelayStatusDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: eightxRelayStatusDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.EightxRelayStatusDataByDate.items;\n      if (csdata.length == 0) {\n        throw true;\n      }\n      if (csdata.map((x) => x.eightxRelayStatus)[0] == \"0\") {\n        csdata[0].eightxRelayStatus = \"OFF\";\n      } else {\n        csdata[0].eightxRelayStatus = \"ON\";\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check == 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Relay 8 (ON/OFF)\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.eightxRelayStatus)[0]}\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/batteryVoltage.js",["388"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { batteryVoltageDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: batteryVoltageDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.BatteryVoltageDataByDate.items;\n      if (csdata.length === 0) {\n        throw true;\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check === 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Battery Voltage\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.batteryVoltage)[0]} V\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/wetBulbTemp.js",["389"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { wetBulbTempDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: wetBulbTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.WetBulbTempDataByDate.items;\n      if (csdata.length === 0) {\n        throw true;\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check === 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Wet Bulb Temperature\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.wetBulbTemp)[0]} °C\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_data/thermalBatteryTemp.js",["390"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { thermalBatteryTempDataByDate } from \"../../graphql/queries\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    marginBottom: 16,\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n};\n\nfunction SimpleCard(props) {\n  const [csdata, setData] = useState([]);\n  const [check, setCheck] = useState();\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const coldStorageData = await API.graphql({\n        query: thermalBatteryTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          limit: 1,\n          sortDirection: \"DESC\",\n        },\n      });\n      const csdata = coldStorageData.data.ThermalBatteryTempDataByDate.items;\n      if (csdata.length === 0) {\n        throw true;\n      }\n      setData(csdata);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const { classes } = props;\n\n  if (check === 0) {\n    return (\n      <center>\n        <div>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography className={classes.title} color=\"textSecondary\">\n                Thermal Battery Temperature\n              </Typography>\n              <Typography variant=\"h3\" component=\"h2\">\n                {csdata.map((x) => x.thermalBatteryTemp)[0]} °C\n              </Typography>\n              <Typography component=\"p\">\n                {csdata.map((x) => x.eventDateTime)[0]}\n                <br />\n                {csdata.map((x) => x.unique_deviceID)[0]}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      </center>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/graphFourHr.js",["391","392","393","394","395","396","397","398"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\nimport _ambientHumid_graph from \"../cs_graph/cs_graph_4hrs/ambientHumid_graph\";\nimport _ambientTemp_graph from \"../cs_graph/cs_graph_4hrs/ambientTemp_graph\";\nimport _batteryVoltage_graph from \"../cs_graph/cs_graph_4hrs/batteryVoltage_graph\";\nimport _coldStorageTemp_graph from \"../cs_graph/cs_graph_4hrs/coldStorageTemp_graph\";\nimport _dewPointTemp_graph from \"../cs_graph/cs_graph_4hrs/dewPointTemp_graph\";\nimport _thermalBatteryTemp_graph from \"../cs_graph/cs_graph_4hrs/thermalBatteryTemp_graph\";\nimport _waterInletTemp_graph from \"../cs_graph/cs_graph_4hrs/waterInletTemp_graph\";\nimport _wetBulbTemp_graph from \"../cs_graph/cs_graph_4hrs/wetBulbTemp_graph\";\n\nfunction Graph() {\n  return (\n    <div className=\"Graph main\">\n      &nbsp; &nbsp;\n      <center>\n        <h2>Last 4 Hours</h2>\n      </center>\n      &nbsp;\n      &nbsp;\n      &nbsp;\n      <Grid container spacing={4} alignItems=\"center\" justifyContent=\"center\">\n        <Grid md={6} sm={5}>\n          <Paper>\n            <_ambientHumid_graph />\n            <_ambientTemp_graph />\n            <_batteryVoltage_graph />\n            <_coldStorageTemp_graph />\n            <_dewPointTemp_graph />\n            <_thermalBatteryTemp_graph />\n            <_waterInletTemp_graph />\n            <_wetBulbTemp_graph />\n          </Paper>\n        </Grid>\n      </Grid>\n      <br />\n    </div>\n  );\n}\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/graphOneDay.js",["399","400","401","402","403","404","405","406"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\nimport _ambientHumid_graph from \"../cs_graph/cs_graph_12hrs/ambientHumid_graph\";\nimport _ambientTemp_graph from \"../cs_graph/cs_graph_12hrs/ambientTemp_graph\";\nimport _batteryVoltage_graph from \"../cs_graph/cs_graph_12hrs/batteryVoltage_graph\";\nimport _coldStorageTemp_graph from \"../cs_graph/cs_graph_12hrs/coldStorageTemp_graph\";\nimport _dewPointTemp_graph from \"../cs_graph/cs_graph_12hrs/dewPointTemp_graph\";\nimport _thermalBatteryTemp_graph from \"../cs_graph/cs_graph_12hrs/thermalBatteryTemp_graph\";\nimport _waterInletTemp_graph from \"../cs_graph/cs_graph_12hrs/waterInletTemp_graph\";\nimport _wetBulbTemp_graph from \"../cs_graph/cs_graph_12hrs/wetBulbTemp_graph\";\n\nfunction Graph() {\n  return (\n    <div className=\"Graph main\">\n      <center>\n      &nbsp; &nbsp;\n        <h2>Last 24 Hours</h2>\n      </center>\n      &nbsp;\n      &nbsp;\n      &nbsp;\n      <Grid container spacing={4} alignItems=\"center\" justifyContent=\"center\">\n        <Grid md={6} sm={5}>\n          <Paper>\n            <_ambientHumid_graph />\n            <_ambientTemp_graph />\n            <_batteryVoltage_graph />\n            <_coldStorageTemp_graph />\n            <_dewPointTemp_graph />\n            <_thermalBatteryTemp_graph />\n            <_waterInletTemp_graph />\n            <_wetBulbTemp_graph />\n          </Paper>\n        </Grid>\n      </Grid>\n      <br />\n    </div>\n  );\n}\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/graphTwelveHr.js",["407","408","409","410","411","412","413","414"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\nimport _ambientHumid_graph from \"../cs_graph/cs_graph_12hrs/ambientHumid_graph\";\nimport _ambientTemp_graph from \"../cs_graph/cs_graph_12hrs/ambientTemp_graph\";\nimport _batteryVoltage_graph from \"../cs_graph/cs_graph_12hrs/batteryVoltage_graph\";\nimport _coldStorageTemp_graph from \"../cs_graph/cs_graph_12hrs/coldStorageTemp_graph\";\nimport _dewPointTemp_graph from \"../cs_graph/cs_graph_12hrs/dewPointTemp_graph\";\nimport _thermalBatteryTemp_graph from \"../cs_graph/cs_graph_12hrs/thermalBatteryTemp_graph\";\nimport _waterInletTemp_graph from \"../cs_graph/cs_graph_12hrs/waterInletTemp_graph\";\nimport _wetBulbTemp_graph from \"../cs_graph/cs_graph_12hrs/wetBulbTemp_graph\";\n\nfunction Graph() {\n  return (\n    <div className=\"Graph main\">\n      <center>\n      &nbsp; &nbsp;\n        <h2>Last 12 Hours</h2>\n      </center>\n      &nbsp;\n      &nbsp;\n      &nbsp;\n      <Grid container spacing={4} alignItems=\"center\" justifyContent=\"center\">\n        <Grid md={6} sm={5}>\n          <Paper>\n            <_ambientHumid_graph />\n            <_ambientTemp_graph />\n            <_batteryVoltage_graph />\n            <_coldStorageTemp_graph />\n            <_dewPointTemp_graph />\n            <_thermalBatteryTemp_graph />\n            <_waterInletTemp_graph />\n            <_wetBulbTemp_graph />\n            </Paper>\n        </Grid>\n      </Grid>\n      <br />\n    </div>\n  );\n}\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/graphOneWeek.js",["415","416","417","418","419","420","421","422"],"import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from '@material-ui/core/Paper';\nimport _ambientHumid_graph from \"../cs_graph/cs_graph_week/ambientHumid_graph\";\nimport _ambientTemp_graph from \"../cs_graph/cs_graph_week/ambientTemp_graph\";\nimport _batteryVoltage_graph from \"../cs_graph/cs_graph_week/batteryVoltage_graph\";\nimport _coldStorageTemp_graph from \"../cs_graph/cs_graph_week/coldStorageTemp_graph\";\nimport _dewPointTemp_graph from \"../cs_graph/cs_graph_week/dewPointTemp_graph\";\nimport _thermalBatteryTemp_graph from \"../cs_graph/cs_graph_week/thermalBatteryTemp_graph\";\nimport _waterInletTemp_graph from \"../cs_graph/cs_graph_week/waterInletTemp_graph\";\nimport _wetBulbTemp_graph from \"../cs_graph/cs_graph_week/wetBulbTemp_graph\";\n\nfunction Graph() {\n  return (\n    <div className=\"Graph main\">\n      <center>\n      &nbsp; &nbsp;\n        <h2>Last 7 Days</h2>\n      </center>\n      &nbsp;\n      &nbsp;\n      &nbsp;\n      <Grid container spacing={4} alignItems=\"center\" justifyContent=\"center\">\n        <Grid md={6} sm={5}>\n          <Paper>\n            <_ambientHumid_graph />\n            <_ambientTemp_graph />\n            <_batteryVoltage_graph />\n            <_coldStorageTemp_graph />\n            <_dewPointTemp_graph />\n            <_thermalBatteryTemp_graph />\n            <_waterInletTemp_graph />\n            <_wetBulbTemp_graph />\n            </Paper>\n        </Grid>\n      </Grid>\n      <br />\n    </div>\n  );\n}\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/graphql/queries.js",[],"/home/dell/Downloads/sprproject/s/coldstorage-main/src/graphql/mutations.js",[],"/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/dewPointTemp_graph.js",["423","424","425","426","427"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { dewPointTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 10080; // 7day offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [dpTemp, setDPT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get DP TEMP\n      const dewPointTemp = await API.graphql({\n        query: dewPointTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const dpTemp_init = dewPointTemp.data.DewPointTempDataByDate.items;\n      const length = dpTemp_init.length;\n      if (length === 0) {\n        throw true;\n      }\n\n      const next = dpTemp_init.map((x) => x.eventDateTime)[length - 1];\n      const dewPointTemp_next = await API.graphql({\n        query: dewPointTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: next },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const dpTemp_next = dewPointTemp_next.data.DewPointTempDataByDate.items;\n      const dpTemp = dpTemp_init.concat(dpTemp_next);\n      //console.log(dpTemp);\n      var count = 60;\n      var ave = 0;\n      var item;\n      const averagedItems = [];\n\n      for (var i = 0; i < dpTemp.length; i++) {\n        if (i % count == 0 && i != 0) {\n          ave = ave / count;\n          item = {\n            eventDateTime: dpTemp[i - count].eventDateTime,\n            dewPointTemp: ave.toString(),\n          };\n          averagedItems.push(item);\n          ave = 0;\n        }\n        ave = ave + parseFloat(dpTemp[i].dewPointTemp);\n      }\n\n      if (dpTemp.length % count != 0) {\n        ave = ave / (dpTemp.length % count);\n        item = {\n          eventDateTime:\n            dpTemp[dpTemp.length - (dpTemp.length % count)].eventDateTime,\n          dewPointTemp: ave.toString(),\n        };\n        averagedItems.push(item);\n      }\n\n      setDPT(averagedItems);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"day\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: dpTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Cold Storage Target Temp\",\n        fill: false,\n        borderColor: \"red\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: dpTemp.map((x) => x.dewPointTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/thermalBatteryTemp_graph.js",["428","429","430","431","432"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { thermalBatteryTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 10080; // 7day offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [tbTemp, setTBT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get TBatt Temp\n      const thermalBatteryTemp = await API.graphql({\n        query: thermalBatteryTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const tbTemp_init =\n        thermalBatteryTemp.data.ThermalBatteryTempDataByDate.items;\n      const length = tbTemp_init.length;\n      if (length === 0) {\n        throw true;\n      }\n\n      const next = tbTemp_init.map((x) => x.eventDateTime)[length - 1];\n      const thermalBatteryTemp_next = await API.graphql({\n        query: thermalBatteryTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: next },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const tbTemp_next =\n        thermalBatteryTemp_next.data.ThermalBatteryTempDataByDate.items;\n      const tbTemp = tbTemp_init.concat(tbTemp_next);\n      //console.log(tbTemp);\n\n      var count = 60;\n      var ave = 0;\n      var item;\n      const averagedItems = [];\n\n      for (var i = 0; i < tbTemp.length; i++) {\n        if (i % count == 0 && i != 0) {\n          ave = ave / count;\n          item = {\n            eventDateTime: tbTemp[i - count].eventDateTime,\n            thermalBatteryTemp: ave.toString(),\n          };\n          averagedItems.push(item);\n          ave = 0;\n        }\n        ave = ave + parseFloat(tbTemp[i].thermalBatteryTemp);\n      }\n\n      if (tbTemp.length % count != 0) {\n        ave = ave / (tbTemp.length % count);\n        item = {\n          eventDateTime:\n            tbTemp[tbTemp.length - (tbTemp.length % count)].eventDateTime,\n          thermalBatteryTemp: ave.toString(),\n        };\n        averagedItems.push(item);\n      }\n\n      setTBT(averagedItems);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"day\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: tbTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Thermal Batt Temp\",\n        fill: false,\n        borderColor: \"red\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: tbTemp.map((x) => x.thermalBatteryTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/wetBulbTemp_graph.js",["433","434","435","436","437"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { wetBulbTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 10080; // 7day offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [wbTemp, setWBT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get WBulb Temp\n      const wetBulbTemp = await API.graphql({\n        query: wetBulbTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const wbTemp_init = wetBulbTemp.data.WetBulbTempDataByDate.items;\n      const length = wbTemp_init.length;\n      if (length === 0) {\n        throw true;\n      }\n      const next = wbTemp_init.map((x) => x.eventDateTime)[length - 1];\n      const wetBulbTemp_next = await API.graphql({\n        query: wetBulbTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: next },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const wbTemp_next = wetBulbTemp_next.data.WetBulbTempDataByDate.items;\n      const wbTemp = wbTemp_init.concat(wbTemp_next);\n      //console.log(wbTemp);\n      var count = 60;\n      var ave = 0;\n      var item;\n      const averagedItems = [];\n\n      for (var i = 0; i < wbTemp.length; i++) {\n        if (i % count == 0 && i != 0) {\n          ave = ave / count;\n          item = {\n            eventDateTime: wbTemp[i - count].eventDateTime,\n            wetBulbTemp: ave.toString(),\n          };\n          averagedItems.push(item);\n          ave = 0;\n        }\n        ave = ave + parseFloat(wbTemp[i].wetBulbTemp);\n      }\n\n      if (wbTemp.length % count != 0) {\n        ave = ave / (wbTemp.length % count);\n        item = {\n          eventDateTime:\n            wbTemp[wbTemp.length - (wbTemp.length % count)].eventDateTime,\n          wetBulbTemp: ave.toString(),\n        };\n        averagedItems.push(item);\n      }\n      setWBT(averagedItems);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"day\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: wbTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Wet Bulb Temp\",\n        fill: false,\n        borderColor: \"violet\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: wbTemp.map((x) => x.wetBulbTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/waterInletTemp_graph.js",["438","439","440","441","442"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { waterInletTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 10080; // 7day offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [wiTemp, setWIT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get WInlet Temp\n      const waterInletTemp = await API.graphql({\n        query: waterInletTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const wiTemp_init = waterInletTemp.data.WaterInletTempDataByDate.items;\n      const length = wiTemp_init.length;\n      if (length === 0) {\n        throw true;\n      }\n      const next = wiTemp_init.map((x) => x.eventDateTime)[length - 1];\n      const waterInletTemp_next = await API.graphql({\n        query: waterInletTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: next },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const wiTemp_next =\n        waterInletTemp_next.data.WaterInletTempDataByDate.items;\n      const wiTemp = wiTemp_init.concat(wiTemp_next);\n      //console.log(wiTemp);\n      var count = 60;\n      var ave = 0;\n      var item;\n      const averagedItems = [];\n\n      for (var i = 0; i < wiTemp.length; i++) {\n        if (i % count == 0 && i != 0) {\n          ave = ave / count;\n          item = {\n            eventDateTime: wiTemp[i - count].eventDateTime,\n            waterInletTemp: ave.toString(),\n          };\n          averagedItems.push(item);\n          ave = 0;\n        }\n        ave = ave + parseFloat(wiTemp[i].waterInletTemp);\n      }\n\n      if (wiTemp.length % count != 0) {\n        ave = ave / (wiTemp.length % count);\n        item = {\n          eventDateTime:\n            wiTemp[wiTemp.length - (wiTemp.length % count)].eventDateTime,\n          waterInletTemp: ave.toString(),\n        };\n        averagedItems.push(item);\n      }\n      setWIT(averagedItems);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"day\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: wiTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Water Inlet Temp\",\n        fill: false,\n        borderColor: \"blue\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: wiTemp.map((x) => x.waterInletTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/coldStorageTemp_graph.js",["443","444","445","446","447"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { coldStorageTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 10080; // 7day offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [csTemp, setCST] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get CS Temp\n      const coldStorageTemp = await API.graphql({\n        query: coldStorageTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const csTemp_init = coldStorageTemp.data.ColdStorageTempDataByDate.items;\n      const length = csTemp_init.length;\n      if (length === 0) {\n        throw true;\n      }\n\n      const next = csTemp_init.map((x) => x.eventDateTime)[length - 1];\n      const coldStorageTemp_next = await API.graphql({\n        query: coldStorageTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: next },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const csTemp_next =\n        coldStorageTemp_next.data.ColdStorageTempDataByDate.items;\n      const csTemp = csTemp_init.concat(csTemp_next);\n      //console.log(csTemp);\n      var count = 60;\n      var ave = 0;\n      var item;\n      const averagedItems = [];\n\n      for (var i = 0; i < csTemp.length; i++) {\n        if (i % count == 0 && i != 0) {\n          ave = ave / count;\n          item = {\n            eventDateTime: csTemp[i - count].eventDateTime,\n            coldStorageTemp: ave.toString(),\n          };\n          averagedItems.push(item);\n          ave = 0;\n        }\n        ave = ave + parseFloat(csTemp[i].coldStorageTemp);\n      }\n\n      if (csTemp.length % count != 0) {\n        ave = ave / (csTemp.length % count);\n        item = {\n          eventDateTime:\n            csTemp[csTemp.length - (csTemp.length % count)].eventDateTime,\n          coldStorageTemp: ave.toString(),\n        };\n        averagedItems.push(item);\n      }\n\n      setCST(averagedItems);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"day\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: csTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Cold Storage Temp\",\n        fill: false,\n        borderColor: \"blue\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: csTemp.map((x) => x.coldStorageTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/ambientHumid_graph.js",["448","449","450","451","452"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { ambientHumidDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 10080; // 7day offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [abHumid, setABH] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get AMB Humid\n      const ambientHumid = await API.graphql({\n        query: ambientHumidDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const abHumid_init = ambientHumid.data.AmbientHumidDataByDate.items;\n      const length = abHumid_init.length;\n      if (length === 0) {\n        throw true;\n      }\n      const next = abHumid_init.map((x) => x.eventDateTime)[length - 1];\n      const ambientHumid_next = await API.graphql({\n        query: ambientHumidDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: next },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const abHumid_next = ambientHumid_next.data.AmbientHumidDataByDate.items;\n      const abHumid = abHumid_init.concat(abHumid_next);\n      //console.log(abHumid);\n      var count = 60;\n      var ave = 0;\n      var item;\n      const averagedItems = [];\n\n      for (var i = 0; i < abHumid.length; i++) {\n        if (i % count == 0 && i != 0) {\n          ave = ave / count;\n          item = {\n            eventDateTime: abHumid[i - count].eventDateTime,\n            ambientHumid: ave.toString(),\n          };\n          averagedItems.push(item);\n          ave = 0;\n        }\n        ave = ave + parseFloat(abHumid[i].ambientHumid);\n      }\n\n      if (abHumid.length % count != 0) {\n        ave = ave / (abHumid.length % count);\n        item = {\n          eventDateTime:\n            abHumid[abHumid.length - (abHumid.length % count)].eventDateTime,\n          ambientHumid: ave.toString(),\n        };\n        averagedItems.push(item);\n      }\n\n      setABH(averagedItems);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"day\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: abHumid.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Ambient Humid\",\n        fill: false,\n        borderColor: \"violet\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: abHumid.map((x) => x.ambientHumid),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/batteryVoltage_graph.js",["453","454","455","456","457"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { batteryVoltageDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 10080; // 7day offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [bVolt, setBV] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get Batt Voltage\n      const batteryVoltage = await API.graphql({\n        query: batteryVoltageDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const bVolt_init = batteryVoltage.data.BatteryVoltageDataByDate.items;\n      const length = bVolt_init.length;\n      if (length === 0) {\n        throw true;\n      }\n      const next = bVolt_init.map((x) => x.eventDateTime)[length - 1];\n      const batteryVoltage_next = await API.graphql({\n        query: batteryVoltageDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: next },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const bVolt_next =\n        batteryVoltage_next.data.BatteryVoltageDataByDate.items;\n      const bVolt = bVolt_init.concat(bVolt_next);\n      //console.log(bVolt);\n      var count = 60;\n      var ave = 0;\n      var item;\n      const averagedItems = [];\n\n      for (var i = 0; i < bVolt.length; i++) {\n        if (i % count == 0 && i != 0) {\n          ave = ave / count;\n          item = {\n            eventDateTime: bVolt[i - count].eventDateTime,\n            batteryVoltage: ave.toString(),\n          };\n          averagedItems.push(item);\n          ave = 0;\n        }\n        ave = ave + parseFloat(bVolt[i].batteryVoltage);\n      }\n\n      if (bVolt.length % count != 0) {\n        ave = ave / (bVolt.length % count);\n        item = {\n          eventDateTime:\n            bVolt[bVolt.length - (bVolt.length % count)].eventDateTime,\n          batteryVoltage: ave.toString(),\n        };\n        averagedItems.push(item);\n      }\n      setBV(averagedItems);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"day\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: bVolt.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Battery Voltage\",\n        fill: false,\n        borderColor: \"green\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: bVolt.map((x) => x.batteryVoltage),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_week/ambientTemp_graph.js",["458","459","460","461","462"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { ambientTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 10080; // 7day offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [abTemp, setABT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get AMB Temp\n      const ambientTemp = await API.graphql({\n        query: ambientTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const abTemp_init = ambientTemp.data.AmbientTempDataByDate.items;\n      const length = abTemp_init.length;\n      if (length === 0) {\n        throw true;\n      }\n      const next = abTemp_init.map((x) => x.eventDateTime)[length - 1];\n      const ambientTemp_next = await API.graphql({\n        query: ambientTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: next },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n\n      const abTemp_next = ambientTemp_next.data.AmbientTempDataByDate.items;\n      const abTemp = abTemp_init.concat(abTemp_next);\n      //console.log(abTemp);\n      var count = 60;\n      var ave = 0;\n      var item;\n      const averagedItems = [];\n\n      for (var i = 0; i < abTemp.length; i++) {\n        if (i % count == 0 && i != 0) {\n          ave = ave / count;\n          item = {\n            eventDateTime: abTemp[i - count].eventDateTime,\n            ambientTemp: ave.toString(),\n          };\n          averagedItems.push(item);\n          ave = 0;\n        }\n        ave = ave + parseFloat(abTemp[i].ambientTemp);\n      }\n\n      if (abTemp.length % count != 0) {\n        ave = ave / (abTemp.length % count);\n        item = {\n          eventDateTime:\n            abTemp[abTemp.length - (abTemp.length % count)].eventDateTime,\n          ambientTemp: ave.toString(),\n        };\n        averagedItems.push(item);\n      }\n      setABT(averagedItems);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"day\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: abTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Ambient Temp\",\n        fill: false,\n        borderColor: \"green\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: abTemp.map((x) => x.ambientTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;\n","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/thermalBatteryTemp_graph.js",["463","464"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { thermalBatteryTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 720; // 12hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [tbTemp, setTBT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get TBatt Temp\n      const thermalBatteryTemp = await API.graphql({\n        query: thermalBatteryTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const tbTemp = thermalBatteryTemp.data.ThermalBatteryTempDataByDate.items;\n      if (tbTemp.length === 0) {\n        throw true;\n      }\n      setTBT(tbTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: tbTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Thermal Batt Temp\",\n        fill: false,\n        borderColor: \"red\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: tbTemp.map((x) => x.thermalBatteryTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/wetBulbTemp_graph.js",["465","466"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { wetBulbTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 720; // 12hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [wbTemp, setWBT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get WBulb Temp\n      const wetBulbTemp = await API.graphql({\n        query: wetBulbTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const wbTemp = wetBulbTemp.data.WetBulbTempDataByDate.items;\n      if (wbTemp.length === 0) {\n        throw true;\n      }\n      setWBT(wbTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: wbTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Wet Bulb Temp\",\n        fill: false,\n        borderColor: \"violet\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: wbTemp.map((x) => x.wetBulbTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/dewPointTemp_graph.js",["467","468"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { dewPointTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 720; // 12hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [dpTemp, setDPT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get DP TEMP\n      const dewPointTemp = await API.graphql({\n        query: dewPointTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const dpTemp = dewPointTemp.data.DewPointTempDataByDate.items;\n      if (dpTemp.length === 0) {\n        throw true;\n      }\n      setDPT(dpTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: dpTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Cold Storage Target Temp\",\n        fill: false,\n        borderColor: \"red\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: dpTemp.map((x) => x.dewPointTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/waterInletTemp_graph.js",["469","470"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { waterInletTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 720; // 12hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [wiTemp, setWIT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get WInlet Temp\n      const waterInletTemp = await API.graphql({\n        query: waterInletTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const wiTemp = waterInletTemp.data.WaterInletTempDataByDate.items;\n      if (wiTemp.length === 0) {\n        throw true;\n      }\n      setWIT(wiTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: wiTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Water Inlet Temp\",\n        fill: false,\n        borderColor: \"blue\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: wiTemp.map((x) => x.waterInletTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/coldStorageTemp_graph.js",["471","472"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { coldStorageTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 720; // 12hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [csTemp, setCST] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get CS Temp\n      const coldStorageTemp = await API.graphql({\n        query: coldStorageTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const csTemp = coldStorageTemp.data.ColdStorageTempDataByDate.items;\n      if (csTemp.length === 0) {\n        throw true;\n      }\n      setCST(csTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: csTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Cold Storage Temp\",\n        fill: false,\n        borderColor: \"blue\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: csTemp.map((x) => x.coldStorageTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/batteryVoltage_graph.js",["473","474"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { batteryVoltageDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 720; // 12hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [bVolt, setBV] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get Batt Voltage\n      const batteryVoltage = await API.graphql({\n        query: batteryVoltageDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const bVolt = batteryVoltage.data.BatteryVoltageDataByDate.items;\n      if (bVolt.length === 0) {\n        throw true;\n      }\n      setBV(bVolt);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: bVolt.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Battery Voltage\",\n        fill: false,\n        borderColor: \"green\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: bVolt.map((x) => x.batteryVoltage),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/ambientHumid_graph.js",["475","476"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { ambientHumidDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 720; // 12hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [abHumid, setABH] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get AMB Humid\n      const ambientHumid = await API.graphql({\n        query: ambientHumidDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const abHumid = ambientHumid.data.AmbientHumidDataByDate.items;\n      if (abHumid.length === 0) {\n        throw true;\n      }\n      setABH(abHumid);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: abHumid.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Ambient Humid\",\n        fill: false,\n        borderColor: \"violet\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: abHumid.map((x) => x.ambientHumid),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_12hrs/ambientTemp_graph.js",["477","478"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { ambientTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 720; // 12hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [abTemp, setABT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get AMB Temp\n      const ambientTemp = await API.graphql({\n        query: ambientTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const abTemp = ambientTemp.data.AmbientTempDataByDate.items;\n      if (abTemp.length === 0) {\n        throw true;\n      }\n      setABT(abTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: abTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Ambient Temp\",\n        fill: false,\n        borderColor: \"green\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: abTemp.map((x) => x.ambientTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/dewPointTemp_graph.js",["479","480"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { dewPointTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 240; // 4hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [dpTemp, setDPT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get DP TEMP\n      const dewPointTemp = await API.graphql({\n        query: dewPointTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const dpTemp = dewPointTemp.data.DewPointTempDataByDate.items;\n      if (dpTemp.length === 0) {\n        throw true;\n      }\n      setDPT(dpTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: dpTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Cold Storage Target Temp\",\n        fill: false,\n        borderColor: \"red\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: dpTemp.map((x) => x.dewPointTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/thermalBatteryTemp_graph.js",["481","482"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { thermalBatteryTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 240; // 4hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [tbTemp, setTBT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get TBatt Temp\n      const thermalBatteryTemp = await API.graphql({\n        query: thermalBatteryTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const tbTemp = thermalBatteryTemp.data.ThermalBatteryTempDataByDate.items;\n      if (tbTemp.length === 0) {\n        throw true;\n      }\n      setTBT(tbTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: tbTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Thermal Batt Temp\",\n        fill: false,\n        borderColor: \"red\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: tbTemp.map((x) => x.thermalBatteryTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/wetBulbTemp_graph.js",["483","484"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { wetBulbTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 240; // 4hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [wbTemp, setWBT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get WBulb Temp\n      const wetBulbTemp = await API.graphql({\n        query: wetBulbTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const wbTemp = wetBulbTemp.data.WetBulbTempDataByDate.items;\n      if (wbTemp.length === 0) {\n        throw true;\n      }\n      setWBT(wbTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: wbTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Wet Bulb Temp\",\n        fill: false,\n        borderColor: \"violet\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: wbTemp.map((x) => x.wetBulbTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/waterInletTemp_graph.js",["485","486"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { waterInletTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 240; // 4hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [wiTemp, setWIT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get WInlet Temp\n      const waterInletTemp = await API.graphql({\n        query: waterInletTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const wiTemp = waterInletTemp.data.WaterInletTempDataByDate.items;\n      if (wiTemp.length === 0) {\n        throw true;\n      }\n      setWIT(wiTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: wiTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Water Inlet Temp\",\n        fill: false,\n        borderColor: \"blue\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: wiTemp.map((x) => x.waterInletTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/batteryVoltage_graph.js",["487","488"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { batteryVoltageDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 240; // 4hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [bVolt, setBV] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get Batt Voltage\n      const batteryVoltage = await API.graphql({\n        query: batteryVoltageDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const bVolt = batteryVoltage.data.BatteryVoltageDataByDate.items;\n      if (bVolt.length === 0) {\n        throw true;\n      }\n      setBV(bVolt);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: bVolt.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Battery Voltage\",\n        fill: false,\n        borderColor: \"green\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: bVolt.map((x) => x.batteryVoltage),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/coldStorageTemp_graph.js",["489","490"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { coldStorageTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 240; // 4hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [csTemp, setCST] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get CS Temp\n      const coldStorageTemp = await API.graphql({\n        query: coldStorageTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const csTemp = coldStorageTemp.data.ColdStorageTempDataByDate.items;\n      if (csTemp.length === 0) {\n        throw true;\n      }\n      setCST(csTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: csTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Cold Storage Temp\",\n        fill: false,\n        borderColor: \"blue\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: csTemp.map((x) => x.coldStorageTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/ambientHumid_graph.js",["491","492"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { ambientHumidDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 240; // 4hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [abHumid, setABH] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get AMB Humid\n      const ambientHumid = await API.graphql({\n        query: ambientHumidDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const abHumid = ambientHumid.data.AmbientHumidDataByDate.items;\n      if (abHumid.length === 0) {\n        throw true;\n      }\n      setABH(abHumid);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: abHumid.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Ambient Humid\",\n        fill: false,\n        borderColor: \"violet\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: abHumid.map((x) => x.ambientHumid),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;","/home/dell/Downloads/sprproject/s/coldstorage-main/src/components/cs_graph/cs_graph_4hrs/ambientTemp_graph.js",["493","494"],"import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { useEffect, useState } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { ambientTempDataByDate } from \"../../../graphql/queries\";\nimport \"chartjs-adapter-date-fns\";\n\nfunction Graph() {\n  var currentTime = new Date();\n  var currentOffset = currentTime.getTimezoneOffset();\n  var ISTOffset = 330; // IST offset UTC +5:30\n  var timeOffset = 240; // 4hr offset\n  var ISTTime = new Date(\n    currentTime.getTime() + (ISTOffset + currentOffset - timeOffset) * 60000\n  );\n  var year = ISTTime.getFullYear();\n  var month = ISTTime.getMonth() + 1;\n  var day = ISTTime.getDate();\n  var hour = ISTTime.getHours();\n  var minute = ISTTime.getMinutes();\n  var second = ISTTime.getSeconds();\n  if (month.toString().length === 1) {\n    month = \"0\" + month;\n  }\n  if (day.toString().length === 1) {\n    day = \"0\" + day;\n  }\n  if (hour.toString().length === 1) {\n    hour = \"0\" + hour;\n  }\n  if (minute.toString().length === 1) {\n    minute = \"0\" + minute;\n  }\n  if (second.toString().length === 1) {\n    second = \"0\" + second;\n  }\n  var dateTime =\n    year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + second;\n\n  const [abTemp, setABT] = useState([]);\n  const [check, setCheck] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    var max = 9999;\n    try {\n      // get AMB Temp\n      const ambientTemp = await API.graphql({\n        query: ambientTempDataByDate,\n        variables: {\n          unique_deviceID: localStorage.getItem(\"id\"),\n          eventDateTime: { ge: dateTime },\n          limit: max,\n          sortDirection: \"ASC\",\n        },\n      });\n      const abTemp = ambientTemp.data.AmbientTempDataByDate.items;\n      if (abTemp.length === 0) {\n        throw true;\n      }\n      setABT(abTemp);\n      setCheck(0);\n    } catch (err) {\n      setCheck(1);\n      console.log(\"error fetching data\");\n    }\n  };\n\n  const options = {\n    legend: {\n      position: \"top\",\n      labels: {\n        boxWidth: 3,\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        type: \"time\",\n        time: {\n          unit: \"hour\",\n        },\n      },\n    },\n  };\n\n  const data = {\n    labels: abTemp.map((x) => x.eventDateTime),\n    datasets: [\n      {\n        label: \"Ambient Temp\",\n        fill: false,\n        borderColor: \"green\",\n        borderWidth: 1,\n        pointRadius: 2,\n        data: abTemp.map((x) => x.ambientTemp),\n      },\n    ],\n  };\n\n  if (check === 0) {\n    return (\n      <div>\n        <Line data={data} options={options} />\n      </div>\n    );\n  } else {\n    return <div>{undefined}</div>;\n  }\n}\n\nexport default Graph;",{"ruleId":"495","replacedBy":"496"},{"ruleId":"497","replacedBy":"498"},{"ruleId":"499","severity":1,"message":"500","line":16,"column":11,"nodeType":"501","messageId":"502","endLine":16,"endColumn":21},{"ruleId":"499","severity":1,"message":"503","line":25,"column":11,"nodeType":"501","messageId":"502","endLine":25,"endColumn":24},{"ruleId":"504","severity":1,"message":"505","line":2,"column":10,"nodeType":"506","messageId":"507","endLine":2,"endColumn":18},{"ruleId":"504","severity":1,"message":"508","line":2,"column":20,"nodeType":"506","messageId":"507","endLine":2,"endColumn":29},{"ruleId":"504","severity":1,"message":"509","line":4,"column":8,"nodeType":"506","messageId":"507","endLine":4,"endColumn":17},{"ruleId":"504","severity":1,"message":"510","line":8,"column":8,"nodeType":"506","messageId":"507","endLine":8,"endColumn":22},{"ruleId":"504","severity":1,"message":"511","line":44,"column":10,"nodeType":"506","messageId":"507","endLine":44,"endColumn":16},{"ruleId":"504","severity":1,"message":"512","line":44,"column":18,"nodeType":"506","messageId":"507","endLine":44,"endColumn":27},{"ruleId":"504","severity":1,"message":"513","line":117,"column":9,"nodeType":"506","messageId":"507","endLine":117,"endColumn":14},{"ruleId":"499","severity":1,"message":"514","line":173,"column":13,"nodeType":"501","messageId":"502","endLine":173,"endColumn":33},{"ruleId":"499","severity":1,"message":"515","line":174,"column":13,"nodeType":"501","messageId":"502","endLine":174,"endColumn":30},{"ruleId":"499","severity":1,"message":"516","line":188,"column":13,"nodeType":"501","messageId":"502","endLine":188,"endColumn":29},{"ruleId":"499","severity":1,"message":"517","line":189,"column":13,"nodeType":"501","messageId":"502","endLine":189,"endColumn":30},{"ruleId":"499","severity":1,"message":"518","line":203,"column":13,"nodeType":"501","messageId":"502","endLine":203,"endColumn":34},{"ruleId":"499","severity":1,"message":"519","line":217,"column":13,"nodeType":"501","messageId":"502","endLine":217,"endColumn":35},{"ruleId":"499","severity":1,"message":"514","line":231,"column":13,"nodeType":"501","messageId":"502","endLine":231,"endColumn":33},{"ruleId":"499","severity":1,"message":"515","line":232,"column":13,"nodeType":"501","messageId":"502","endLine":232,"endColumn":30},{"ruleId":"499","severity":1,"message":"516","line":246,"column":13,"nodeType":"501","messageId":"502","endLine":246,"endColumn":29},{"ruleId":"499","severity":1,"message":"517","line":247,"column":13,"nodeType":"501","messageId":"502","endLine":247,"endColumn":30},{"ruleId":"499","severity":1,"message":"518","line":260,"column":14,"nodeType":"501","messageId":"502","endLine":260,"endColumn":35},{"ruleId":"499","severity":1,"message":"519","line":274,"column":13,"nodeType":"501","messageId":"502","endLine":274,"endColumn":35},{"ruleId":"504","severity":1,"message":"509","line":150,"column":8,"nodeType":"506","messageId":"507","endLine":150,"endColumn":17},{"ruleId":"504","severity":1,"message":"510","line":154,"column":8,"nodeType":"506","messageId":"507","endLine":154,"endColumn":22},{"ruleId":"504","severity":1,"message":"520","line":157,"column":8,"nodeType":"506","messageId":"507","endLine":157,"endColumn":24},{"ruleId":"504","severity":1,"message":"521","line":158,"column":8,"nodeType":"506","messageId":"507","endLine":158,"endColumn":21},{"ruleId":"504","severity":1,"message":"522","line":159,"column":8,"nodeType":"506","messageId":"507","endLine":159,"endColumn":20},{"ruleId":"504","severity":1,"message":"523","line":160,"column":8,"nodeType":"506","messageId":"507","endLine":160,"endColumn":21},{"ruleId":"504","severity":1,"message":"524","line":161,"column":8,"nodeType":"506","messageId":"507","endLine":161,"endColumn":25},{"ruleId":"504","severity":1,"message":"525","line":162,"column":8,"nodeType":"506","messageId":"507","endLine":162,"endColumn":26},{"ruleId":"504","severity":1,"message":"513","line":297,"column":9,"nodeType":"506","messageId":"507","endLine":297,"endColumn":14},{"ruleId":"499","severity":1,"message":"526","line":357,"column":9,"nodeType":"501","messageId":"502","endLine":357,"endColumn":29},{"ruleId":"499","severity":1,"message":"527","line":358,"column":9,"nodeType":"501","messageId":"502","endLine":358,"endColumn":29},{"ruleId":"499","severity":1,"message":"528","line":359,"column":9,"nodeType":"501","messageId":"502","endLine":359,"endColumn":31},{"ruleId":"499","severity":1,"message":"529","line":360,"column":9,"nodeType":"501","messageId":"502","endLine":360,"endColumn":30},{"ruleId":"499","severity":1,"message":"530","line":361,"column":9,"nodeType":"501","messageId":"502","endLine":361,"endColumn":30},{"ruleId":"499","severity":1,"message":"531","line":362,"column":9,"nodeType":"501","messageId":"502","endLine":362,"endColumn":29},{"ruleId":"499","severity":1,"message":"532","line":363,"column":9,"nodeType":"501","messageId":"502","endLine":363,"endColumn":31},{"ruleId":"499","severity":1,"message":"533","line":364,"column":9,"nodeType":"501","messageId":"502","endLine":364,"endColumn":31},{"ruleId":"499","severity":1,"message":"534","line":373,"column":9,"nodeType":"501","messageId":"502","endLine":373,"endColumn":28},{"ruleId":"499","severity":1,"message":"535","line":374,"column":9,"nodeType":"501","messageId":"502","endLine":374,"endColumn":32},{"ruleId":"499","severity":1,"message":"536","line":375,"column":9,"nodeType":"501","messageId":"502","endLine":375,"endColumn":28},{"ruleId":"499","severity":1,"message":"537","line":376,"column":9,"nodeType":"501","messageId":"502","endLine":376,"endColumn":25},{"ruleId":"499","severity":1,"message":"526","line":388,"column":9,"nodeType":"501","messageId":"502","endLine":388,"endColumn":29},{"ruleId":"499","severity":1,"message":"527","line":389,"column":9,"nodeType":"501","messageId":"502","endLine":389,"endColumn":29},{"ruleId":"499","severity":1,"message":"528","line":390,"column":9,"nodeType":"501","messageId":"502","endLine":390,"endColumn":31},{"ruleId":"499","severity":1,"message":"529","line":391,"column":9,"nodeType":"501","messageId":"502","endLine":391,"endColumn":30},{"ruleId":"499","severity":1,"message":"530","line":392,"column":9,"nodeType":"501","messageId":"502","endLine":392,"endColumn":30},{"ruleId":"499","severity":1,"message":"531","line":393,"column":9,"nodeType":"501","messageId":"502","endLine":393,"endColumn":29},{"ruleId":"499","severity":1,"message":"532","line":394,"column":9,"nodeType":"501","messageId":"502","endLine":394,"endColumn":31},{"ruleId":"499","severity":1,"message":"533","line":395,"column":9,"nodeType":"501","messageId":"502","endLine":395,"endColumn":31},{"ruleId":"499","severity":1,"message":"534","line":404,"column":37,"nodeType":"501","messageId":"502","endLine":404,"endColumn":56},{"ruleId":"499","severity":1,"message":"535","line":405,"column":50,"nodeType":"501","messageId":"502","endLine":405,"endColumn":73},{"ruleId":"499","severity":1,"message":"536","line":406,"column":45,"nodeType":"501","messageId":"502","endLine":406,"endColumn":64},{"ruleId":"499","severity":1,"message":"537","line":407,"column":42,"nodeType":"501","messageId":"502","endLine":407,"endColumn":58},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":47,"column":25,"nodeType":"544","messageId":"545","endLine":47,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":50,"column":52,"nodeType":"544","messageId":"545","endLine":50,"endColumn":54},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"542","severity":1,"message":"543","line":47,"column":25,"nodeType":"544","messageId":"545","endLine":47,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":50,"column":53,"nodeType":"544","messageId":"545","endLine":50,"endColumn":55},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"546","severity":1,"message":"547","line":49,"column":31,"nodeType":"548","messageId":"549","endLine":49,"endColumn":40},{"ruleId":"542","severity":1,"message":"543","line":47,"column":25,"nodeType":"544","messageId":"545","endLine":47,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":50,"column":51,"nodeType":"544","messageId":"545","endLine":50,"endColumn":53},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"542","severity":1,"message":"543","line":47,"column":25,"nodeType":"544","messageId":"545","endLine":47,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":50,"column":51,"nodeType":"544","messageId":"545","endLine":50,"endColumn":53},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"542","severity":1,"message":"543","line":47,"column":25,"nodeType":"544","messageId":"545","endLine":47,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":51,"column":52,"nodeType":"544","messageId":"545","endLine":51,"endColumn":54},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"542","severity":1,"message":"543","line":47,"column":25,"nodeType":"544","messageId":"545","endLine":47,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":50,"column":51,"nodeType":"544","messageId":"545","endLine":50,"endColumn":53},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"504","severity":1,"message":"550","line":10,"column":8,"nodeType":"506","messageId":"507","endLine":10,"endColumn":17},{"ruleId":"542","severity":1,"message":"543","line":48,"column":25,"nodeType":"544","messageId":"545","endLine":48,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":49,"column":9,"nodeType":"540","messageId":"541","endLine":49,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":51,"column":52,"nodeType":"544","messageId":"545","endLine":51,"endColumn":54},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"542","severity":1,"message":"543","line":47,"column":25,"nodeType":"544","messageId":"545","endLine":47,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":50,"column":53,"nodeType":"544","messageId":"545","endLine":50,"endColumn":55},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":47,"column":25,"nodeType":"544","messageId":"545","endLine":47,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":50,"column":53,"nodeType":"544","messageId":"545","endLine":50,"endColumn":55},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"542","severity":1,"message":"543","line":47,"column":25,"nodeType":"544","messageId":"545","endLine":47,"endColumn":27},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":50,"column":53,"nodeType":"544","messageId":"545","endLine":50,"endColumn":55},{"ruleId":"542","severity":1,"message":"543","line":65,"column":13,"nodeType":"544","messageId":"545","endLine":65,"endColumn":15},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"538","severity":1,"message":"539","line":48,"column":9,"nodeType":"540","messageId":"541","endLine":48,"endColumn":20},{"ruleId":"499","severity":1,"message":"551","line":26,"column":13,"nodeType":"501","messageId":"502","endLine":26,"endColumn":36},{"ruleId":"499","severity":1,"message":"552","line":27,"column":13,"nodeType":"501","messageId":"502","endLine":27,"endColumn":35},{"ruleId":"499","severity":1,"message":"553","line":28,"column":13,"nodeType":"501","messageId":"502","endLine":28,"endColumn":38},{"ruleId":"499","severity":1,"message":"554","line":29,"column":13,"nodeType":"501","messageId":"502","endLine":29,"endColumn":39},{"ruleId":"499","severity":1,"message":"555","line":30,"column":13,"nodeType":"501","messageId":"502","endLine":30,"endColumn":36},{"ruleId":"499","severity":1,"message":"556","line":31,"column":13,"nodeType":"501","messageId":"502","endLine":31,"endColumn":42},{"ruleId":"499","severity":1,"message":"557","line":32,"column":13,"nodeType":"501","messageId":"502","endLine":32,"endColumn":38},{"ruleId":"499","severity":1,"message":"558","line":33,"column":13,"nodeType":"501","messageId":"502","endLine":33,"endColumn":35},{"ruleId":"499","severity":1,"message":"551","line":26,"column":13,"nodeType":"501","messageId":"502","endLine":26,"endColumn":36},{"ruleId":"499","severity":1,"message":"552","line":27,"column":13,"nodeType":"501","messageId":"502","endLine":27,"endColumn":35},{"ruleId":"499","severity":1,"message":"553","line":28,"column":13,"nodeType":"501","messageId":"502","endLine":28,"endColumn":38},{"ruleId":"499","severity":1,"message":"554","line":29,"column":13,"nodeType":"501","messageId":"502","endLine":29,"endColumn":39},{"ruleId":"499","severity":1,"message":"555","line":30,"column":13,"nodeType":"501","messageId":"502","endLine":30,"endColumn":36},{"ruleId":"499","severity":1,"message":"556","line":31,"column":13,"nodeType":"501","messageId":"502","endLine":31,"endColumn":42},{"ruleId":"499","severity":1,"message":"557","line":32,"column":13,"nodeType":"501","messageId":"502","endLine":32,"endColumn":38},{"ruleId":"499","severity":1,"message":"558","line":33,"column":13,"nodeType":"501","messageId":"502","endLine":33,"endColumn":35},{"ruleId":"499","severity":1,"message":"551","line":26,"column":13,"nodeType":"501","messageId":"502","endLine":26,"endColumn":36},{"ruleId":"499","severity":1,"message":"552","line":27,"column":13,"nodeType":"501","messageId":"502","endLine":27,"endColumn":35},{"ruleId":"499","severity":1,"message":"553","line":28,"column":13,"nodeType":"501","messageId":"502","endLine":28,"endColumn":38},{"ruleId":"499","severity":1,"message":"554","line":29,"column":13,"nodeType":"501","messageId":"502","endLine":29,"endColumn":39},{"ruleId":"499","severity":1,"message":"555","line":30,"column":13,"nodeType":"501","messageId":"502","endLine":30,"endColumn":36},{"ruleId":"499","severity":1,"message":"556","line":31,"column":13,"nodeType":"501","messageId":"502","endLine":31,"endColumn":42},{"ruleId":"499","severity":1,"message":"557","line":32,"column":13,"nodeType":"501","messageId":"502","endLine":32,"endColumn":38},{"ruleId":"499","severity":1,"message":"558","line":33,"column":13,"nodeType":"501","messageId":"502","endLine":33,"endColumn":35},{"ruleId":"499","severity":1,"message":"551","line":26,"column":13,"nodeType":"501","messageId":"502","endLine":26,"endColumn":36},{"ruleId":"499","severity":1,"message":"552","line":27,"column":13,"nodeType":"501","messageId":"502","endLine":27,"endColumn":35},{"ruleId":"499","severity":1,"message":"553","line":28,"column":13,"nodeType":"501","messageId":"502","endLine":28,"endColumn":38},{"ruleId":"499","severity":1,"message":"554","line":29,"column":13,"nodeType":"501","messageId":"502","endLine":29,"endColumn":39},{"ruleId":"499","severity":1,"message":"555","line":30,"column":13,"nodeType":"501","messageId":"502","endLine":30,"endColumn":36},{"ruleId":"499","severity":1,"message":"556","line":31,"column":13,"nodeType":"501","messageId":"502","endLine":31,"endColumn":42},{"ruleId":"499","severity":1,"message":"557","line":32,"column":13,"nodeType":"501","messageId":"502","endLine":32,"endColumn":38},{"ruleId":"499","severity":1,"message":"558","line":33,"column":13,"nodeType":"501","messageId":"502","endLine":33,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"562"},{"ruleId":"538","severity":1,"message":"539","line":64,"column":9,"nodeType":"540","messageId":"541","endLine":64,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":87,"column":23,"nodeType":"544","messageId":"545","endLine":87,"endColumn":25},{"ruleId":"542","severity":1,"message":"563","line":87,"column":33,"nodeType":"544","messageId":"545","endLine":87,"endColumn":35},{"ruleId":"542","severity":1,"message":"563","line":99,"column":33,"nodeType":"544","messageId":"545","endLine":99,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"564"},{"ruleId":"538","severity":1,"message":"539","line":65,"column":9,"nodeType":"540","messageId":"541","endLine":65,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":90,"column":23,"nodeType":"544","messageId":"545","endLine":90,"endColumn":25},{"ruleId":"542","severity":1,"message":"563","line":90,"column":33,"nodeType":"544","messageId":"545","endLine":90,"endColumn":35},{"ruleId":"542","severity":1,"message":"563","line":102,"column":33,"nodeType":"544","messageId":"545","endLine":102,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"565"},{"ruleId":"538","severity":1,"message":"539","line":63,"column":9,"nodeType":"540","messageId":"541","endLine":63,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":85,"column":23,"nodeType":"544","messageId":"545","endLine":85,"endColumn":25},{"ruleId":"542","severity":1,"message":"563","line":85,"column":33,"nodeType":"544","messageId":"545","endLine":85,"endColumn":35},{"ruleId":"542","severity":1,"message":"563","line":97,"column":33,"nodeType":"544","messageId":"545","endLine":97,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"566"},{"ruleId":"538","severity":1,"message":"539","line":63,"column":9,"nodeType":"540","messageId":"541","endLine":63,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":86,"column":23,"nodeType":"544","messageId":"545","endLine":86,"endColumn":25},{"ruleId":"542","severity":1,"message":"563","line":86,"column":33,"nodeType":"544","messageId":"545","endLine":86,"endColumn":35},{"ruleId":"542","severity":1,"message":"563","line":98,"column":33,"nodeType":"544","messageId":"545","endLine":98,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"567"},{"ruleId":"538","severity":1,"message":"539","line":64,"column":9,"nodeType":"540","messageId":"541","endLine":64,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":88,"column":23,"nodeType":"544","messageId":"545","endLine":88,"endColumn":25},{"ruleId":"542","severity":1,"message":"563","line":88,"column":33,"nodeType":"544","messageId":"545","endLine":88,"endColumn":35},{"ruleId":"542","severity":1,"message":"563","line":100,"column":33,"nodeType":"544","messageId":"545","endLine":100,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"568"},{"ruleId":"538","severity":1,"message":"539","line":64,"column":9,"nodeType":"540","messageId":"541","endLine":64,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":85,"column":23,"nodeType":"544","messageId":"545","endLine":85,"endColumn":25},{"ruleId":"542","severity":1,"message":"563","line":85,"column":33,"nodeType":"544","messageId":"545","endLine":85,"endColumn":35},{"ruleId":"542","severity":1,"message":"563","line":97,"column":34,"nodeType":"544","messageId":"545","endLine":97,"endColumn":36},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"569"},{"ruleId":"538","severity":1,"message":"539","line":64,"column":9,"nodeType":"540","messageId":"541","endLine":64,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":87,"column":23,"nodeType":"544","messageId":"545","endLine":87,"endColumn":25},{"ruleId":"542","severity":1,"message":"563","line":87,"column":33,"nodeType":"544","messageId":"545","endLine":87,"endColumn":35},{"ruleId":"542","severity":1,"message":"563","line":99,"column":32,"nodeType":"544","messageId":"545","endLine":99,"endColumn":34},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"570"},{"ruleId":"538","severity":1,"message":"539","line":64,"column":9,"nodeType":"540","messageId":"541","endLine":64,"endColumn":20},{"ruleId":"542","severity":1,"message":"543","line":86,"column":23,"nodeType":"544","messageId":"545","endLine":86,"endColumn":25},{"ruleId":"542","severity":1,"message":"563","line":86,"column":33,"nodeType":"544","messageId":"545","endLine":86,"endColumn":35},{"ruleId":"542","severity":1,"message":"563","line":98,"column":33,"nodeType":"544","messageId":"545","endLine":98,"endColumn":35},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"571"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"572"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"573"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"574"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"575"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"576"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"577"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"578"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"579"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"580"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"581"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"582"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"583"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"584"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"585"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},{"ruleId":"559","severity":1,"message":"560","line":45,"column":6,"nodeType":"561","endLine":45,"endColumn":8,"suggestions":"586"},{"ruleId":"538","severity":1,"message":"539","line":62,"column":9,"nodeType":"540","messageId":"541","endLine":62,"endColumn":20},"no-native-reassign",["587"],"no-negated-in-lhs",["588"],"react/jsx-pascal-case","Imported JSX component Add_id must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Remove_id must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'FormLabel' is defined but never used.","'FormHelperText' is defined but never used.","'value3' is assigned a value but never used.","'setvalue3' is assigned a value but never used.","'error' is assigned a value but never used.","Imported JSX component _coldStorageTemp must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _dewPointTemp must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _ambientTemp must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _ambientHumid must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _doorSensorStatus must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _powerSwitchStatus must be in PascalCase or SCREAMING_SNAKE_CASE","'_coldStorageTemp' is defined but never used.","'_dewPointTemp' is defined but never used.","'_ambientTemp' is defined but never used.","'_ambientHumid' is defined but never used.","'_doorSensorStatus' is defined but never used.","'_powerSwitchStatus' is defined but never used.","Imported JSX component _onexRelayStatus must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _twoxRelayStatus must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _threexRelayStatus must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _fourxRelayStatus must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _fivexRelayStatus must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _sixxRelayStatus must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _sevenxRelayStatus must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _eightxRelayStatus must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _batteryVoltage must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _thermalBatteryTemp must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _waterInletTemp must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _wetBulbTemp must be in PascalCase or SCREAMING_SNAKE_CASE","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.find() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","'awsconfig' is defined but never used.","Imported JSX component _ambientHumid_graph must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _ambientTemp_graph must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _batteryVoltage_graph must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _coldStorageTemp_graph must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _dewPointTemp_graph must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _thermalBatteryTemp_graph must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _waterInletTemp_graph must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component _wetBulbTemp_graph must be in PascalCase or SCREAMING_SNAKE_CASE","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["589"],"Expected '!==' and instead saw '!='.",["590"],["591"],["592"],["593"],["594"],["595"],["596"],["597"],["598"],["599"],["600"],["601"],["602"],["603"],["604"],["605"],["606"],["607"],["608"],["609"],["610"],["611"],["612"],"no-global-assign","no-unsafe-negation",{"desc":"613","fix":"614"},{"desc":"613","fix":"615"},{"desc":"613","fix":"616"},{"desc":"613","fix":"617"},{"desc":"613","fix":"618"},{"desc":"613","fix":"619"},{"desc":"613","fix":"620"},{"desc":"613","fix":"621"},{"desc":"613","fix":"622"},{"desc":"613","fix":"623"},{"desc":"613","fix":"624"},{"desc":"613","fix":"625"},{"desc":"613","fix":"626"},{"desc":"613","fix":"627"},{"desc":"613","fix":"628"},{"desc":"613","fix":"629"},{"desc":"613","fix":"630"},{"desc":"613","fix":"631"},{"desc":"613","fix":"632"},{"desc":"613","fix":"633"},{"desc":"613","fix":"634"},{"desc":"613","fix":"635"},{"desc":"613","fix":"636"},{"desc":"613","fix":"637"},"Update the dependencies array to be: [fetchData]",{"range":"638","text":"639"},{"range":"640","text":"639"},{"range":"641","text":"639"},{"range":"642","text":"639"},{"range":"643","text":"639"},{"range":"644","text":"639"},{"range":"645","text":"639"},{"range":"646","text":"639"},{"range":"647","text":"639"},{"range":"648","text":"639"},{"range":"649","text":"639"},{"range":"650","text":"639"},{"range":"651","text":"639"},{"range":"652","text":"639"},{"range":"653","text":"639"},{"range":"654","text":"639"},{"range":"655","text":"639"},{"range":"656","text":"639"},{"range":"657","text":"639"},{"range":"658","text":"639"},{"range":"659","text":"639"},{"range":"660","text":"639"},{"range":"661","text":"639"},{"range":"662","text":"639"},[1322,1324],"[fetchData]",[1328,1330],[1321,1323],[1324,1326],[1325,1327],[1323,1325],[1322,1324],[1321,1323],[1326,1328],[1319,1321],[1320,1322],[1322,1324],[1323,1325],[1320,1322],[1321,1323],[1319,1321],[1319,1321],[1325,1327],[1318,1320],[1321,1323],[1319,1321],[1322,1324],[1320,1322],[1318,1320]]